{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import keras\n",
    "import numpy as np\n",
    "import os\n",
    "import time\n",
    "from vgg16 import VGG16\n",
    "from keras.preprocessing import image\n",
    "from keras.applications.imagenet_utils import preprocess_input\n",
    "from imagenet_utils import decode_predictions\n",
    "from keras.layers import Dense, Activation, Flatten\n",
    "from keras.layers import merge, Input\n",
    "from keras.models import Model\n",
    "from keras.utils import np_utils\n",
    "from sklearn.utils import shuffle\n",
    "from sklearn.cross_validation import train_test_split\n",
    "\n",
    "from keras.models import load_model\n",
    "\n",
    "my_model=load_model('my_model_animal.h5')\n",
    "\n",
    "import numpy as np\n",
    "img = image.load_img(\"14.jpg\",target_size=(224,224,3))\n",
    "x = image.img_to_array(img)\n",
    "x = np.expand_dims(x,axis=0)\n",
    "x = preprocess_input(x)\n",
    "x = np.array(x)\n",
    "\n",
    "x.shape\n",
    "\n",
    "CLASS_INDEX = {0:\"cats\",1:\"dogs\",2:\"horses\",3:\"Humans\"}\n",
    "def decode_predictions(preds):\n",
    "    global CLASS_INDEX\n",
    "    assert len(preds.shape) == 2 and preds.shape[1] == 4\n",
    "   \n",
    "    indices = np.argmax(preds, axis=-1)\n",
    "    results = []\n",
    "    for i in indices:\n",
    "        results.append(CLASS_INDEX[i])\n",
    "    return results\n",
    "\n",
    "preds = my_model.predict(x)\n",
    "print('Predicted:', decode_predictions(preds))\n",
    "\n",
    "preds.shape[1]\n",
    "\n",
    "from keras.preprocessing import image as image_utils\n",
    "#from imagenet_utils import decode_predictions\n",
    "from imagenet_utils import preprocess_input\n",
    "#from vgg16 import VGG16\n",
    "import argparse\n",
    "import cv2\n",
    "import numpy as np\n",
    "import os\n",
    "import random\n",
    "import sys\n",
    "\n",
    "import threading\n",
    "\n",
    "label = \"\"\n",
    "frame = None\n",
    "\n",
    "\n",
    "    \n",
    "import cv2, pafy\n",
    "\n",
    "url = \"https://www.youtube.com/watch?v=EVXRMcJF3_M\"\n",
    "videoPafy = pafy.new(url)\n",
    "best = videoPafy.getbest(preftype=\"webm\")\n",
    "\n",
    "cap = cv2.VideoCapture(best.url)\n",
    "if (cap.isOpened()):\n",
    "    print(\"Camera OK\")\n",
    "else:\n",
    "    cap.open()\n",
    "\n",
    "#keras_thread = MyThread()\n",
    "#keras_thread.start()\n",
    "\n",
    "while (True):\n",
    "    ret, original = cap.read()\n",
    "    image = cv2.resize(original, (224, 224))\n",
    "    #image = image_utils.load_img(frame, target_size=(224, 224))\n",
    "    image = image_utils.img_to_array(image)\n",
    "\n",
    "# Convert (3, 224, 224) to (1, 3, 224, 224)\n",
    "# Here \"1\" is the number of images passed to network\n",
    "# We need it for passing batch containing serveral images in real project\n",
    "    image = np.expand_dims(image, axis=0)\n",
    "    image = preprocess_input(image)\n",
    "\n",
    "\n",
    "# Classify the image\n",
    "    print(\"[INFO] classifying image...\")\n",
    "    preds = my_model.predict(image)\n",
    "    label = decode_predictions(preds)[0]\n",
    "    print(label)\n",
    "\n",
    "    # Display the predictions\n",
    "    # print(\"ImageNet ID: {}, Label: {}\".format(inID, label))\n",
    "    cv2.putText(original, \"Label: {}\".format(label), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)\n",
    "    cv2.imshow(\"Classification\", original)\n",
    "\n",
    "    if (cv2.waitKey(1) & 0xFF == ord('q')):\n",
    "        break;\n",
    "\n",
    "cap.release()\n",
    "frame = None\n",
    "cv2.destroyAllWindows()\n",
    "sys.exit()\n",
    "\n",
    "from inception_v3 import InceptionV3\n",
    "\n",
    "model = InceptionV3(include_top=True,weights=\"imagenet\")\n",
    "\n",
    "Image_input = Input(shape =(229,229,3))\n",
    "\n",
    "model = InceptionV3(input_tensor=Image_input, include_top=True,weights='imagenet')\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
